package utils

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"html"
	"io/ioutil"
	"net"
	"net/http"
	"net/smtp"
	"os"
	"reflect"
	"strconv"
	"strings"
	"text/template"
	"time"

	models "api_thienhang_com/pkg/entity"
	"github.com/asaskevich/govalidator"
	"github.com/google/uuid"
	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/bcrypt"
)

const (
	E_WELCOME = 0
	E_OTP     = 1
	E_RESET   = 2
	E_VERSION = 3
)

type Response struct {
	Error   bool        `json:"error"`
	Message string      `json:"message"`
	Data    interface{} `json:"data"`
}

func JSON(w http.ResponseWriter, statusCode int, data interface{}) {
	w.WriteHeader(statusCode)
	err := json.NewEncoder(w).Encode(data)

	if err != nil {
		fmt.Fprintf(w, "%s", err.Error())
	}
}

func ERROR(w http.ResponseWriter, statusCode int, err error) {
	if err != nil {
		JSON(w, statusCode, struct {
			Error string `json:"error"`
		}{
			Error: err.Error(),
		})
		return
	}
	JSON(w, http.StatusBadRequest, nil)
}

func GetExpirationTime(hours int) int64 {
	return time.Now().Add(time.Hour * time.Duration(hours)).Unix()
}

func GetDurationByHour(hours int) time.Duration {
	return time.Hour * time.Duration(hours)
}

func ParseTemplate(fileName string, data interface{}) (content string, err error) {
	t, err := template.ParseFiles(fileName)
	if err != nil {
		return "", err
	}
	buffer := new(bytes.Buffer)
	if err = t.Execute(buffer, data); err != nil {
		return "", err
	}
	return buffer.String(), nil
}

func ResponseWithJson(w http.ResponseWriter, status int, object interface{}) {
	w.WriteHeader(status)
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
	var res Response
	if status == http.StatusOK {
		res = Response{
			false,
			"success",
			object,
		}
	} else {
		res = Response{
			true,
			"error",
			object,
		}
	}
	json.NewEncoder(w).Encode(res)
}

func SendEmail(to []string, msg string, eType int) (err error) {
	var t *template.Template
	var title string = "Th√¥ng b√°o"
	switch eType {
	case E_WELCOME:
		title = "Th∆∞ ch√†o m·ª´ng thienhang.com"
		t, err = template.ParseFiles("template/welcome.html")
		if err != nil {
			logrus.Error(err)
		}
	case E_OTP:
		t, err = template.ParseFiles("template/sendotp.html")
		if err != nil {
			logrus.Error(err)
		}
	case E_RESET:
		t, _ = template.ParseFiles("./././template/resetpassword.html")
	case E_VERSION:
		title = "üê∑ Th√¥ng b√°o b·∫£n c·∫≠p nh·∫≠t m·ªõi"
		t, _ = template.ParseFiles("./././template/version.html")
	default:
		title = "test"
		t, err = template.ParseFiles("template/welcome.html")
		if err != nil {
			logrus.Error(err)
		}
	}

	var body bytes.Buffer

	mimeHeaders := "MIME-version: 1.0;\nContent-Type: text/html; charset=\"UTF-8\";\n\n"
	body.Write([]byte(fmt.Sprintf("Subject: %s  \n%s\n\n", title, mimeHeaders)))

	t.Execute(&body, struct {
		Name    string
		Message string
	}{

		Name:    to[0],
		Message: msg,
	})

	auth := smtp.PlainAuth("", "postmaster@mail.thienhang.com", "f815d1178c6b3f30aaa1bed91ea13d2b-78651cec-f6284dac", "smtp.eu.mailgun.org")
	err = smtp.SendMail("smtp.eu.mailgun.org:587", auth, "noreply@thienhang.com", to, body.Bytes())
	if err != nil {
		logrus.Error(err)
		return err
	}
	fmt.Println(auth)
	return nil
}

func GenerateOtp(number string) string {
	return "XXXXX"
}

func GetEnvVar(key string, defaultValue string) string {
	value := os.Getenv(key)
	if len(value) == 0 {
		return defaultValue
	}
	return value
}

func Hash(password string) (string, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), 15)
	return string(bytes), err
}

func ComparePasswordAndHash(hashedPassword, password string) error {
	return bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))
}

func Santize(data string) string {
	data = html.EscapeString(strings.TrimSpace(data))
	return data
}

func ValidateUser(user *models.User) bool {
	// email and phone are empty
	if govalidator.IsNull(user.Email) && govalidator.IsNull(user.PhoneNumber) {
		return false
	}

	if !govalidator.IsEmail(user.Email) {
		return false
	}

	return true
}

func setField(field reflect.Value, defaultVal string) error {

	if !field.CanSet() {
		return errors.New("Can't set value\n")
	}

	switch field.Kind() {

	case reflect.Int:
		if val, err := strconv.ParseInt(defaultVal, 10, 64); err == nil {
			field.Set(reflect.ValueOf(int(val)).Convert(field.Type()))
		}
	case reflect.String:
		field.Set(reflect.ValueOf(defaultVal).Convert(field.Type()))
	}

	return nil
}

func SetDefault(ptr interface{}) error {
	tag := "default"
	if reflect.TypeOf(ptr).Kind() != reflect.Ptr {
		return fmt.Errorf("Not a pointer")
	}

	v := reflect.ValueOf(ptr).Elem()
	t := v.Type()

	for i := 0; i < t.NumField(); i++ {
		if defaultVal := t.Field(i).Tag.Get(tag); defaultVal != "-" {
			if err := setField(v.Field(i), defaultVal); err != nil {
				return err
			}

		}
	}
	return nil
}

func GenerateUUID() string {
	return uuid.New().String()
}

func Convert2DBRef(data interface{}) (models.DBRef, error) {
	var inter []interface{}
	dbRef := models.DBRef{}

	jsonbody, _ := json.Marshal(data)
	err := json.Unmarshal(jsonbody, &inter)
	if err != nil {
		return dbRef, err
	}
	for _, r := range inter {
		m, _ := r.(map[string]interface{})
		switch m["Key"] {
		case "ref":
			dbRef.Ref = m["Value"]
		case "id":
			dbRef.ID = m["Value"]
		case "db":
			dbRef.DB = m["Value"]
		}
	}
	return dbRef, nil
}

func LoadJsonFile(filename string) []byte {
	file, err := ioutil.ReadFile(filename)
	if err != nil {
		logrus.Error(err)
	}
	return file
}

func getIP() (string, error) {
	ifaces, err := net.Interfaces()
	if err != nil {
		return "", err
	}
	for _, iface := range ifaces {
		if iface.Flags&net.FlagUp == 0 {
			continue // interface down
		}
		if iface.Flags&net.FlagLoopback != 0 {
			continue // loopback interface
		}
		addrs, err := iface.Addrs()
		if err != nil {
			return "", err
		}
		for _, addr := range addrs {
			var ip net.IP
			switch v := addr.(type) {
			case *net.IPNet:
				ip = v.IP
			case *net.IPAddr:
				ip = v.IP
			}
			if ip == nil || ip.IsLoopback() {
				continue
			}
			ip = ip.To4()
			if ip == nil {
				continue // not an ipv4 address
			}
			v := ip.String()
			return v, nil
		}
	}
	return "", errors.New("are you connected to the network")
}

var (
	Err_ABNORMAL             = errors.New("l·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ h·ªá th·ªëng. Anh ch·ªã vui l√≤ng li√™n l·∫°c l·∫°i v·ªõi CSKH sandexcare.com")
	ErrAmountOut             = errors.New("amount out")
	ErrSignature             = errors.New("invalid signature")
	ErrSignature1            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng, Ng√¢n h√†ng ph√°t h√†nh th·∫ª kh√¥ng c·∫•p ph√©p cho giao d·ªãch ho·∫∑c th·∫ª ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t d·ªãch v·ª• thanh to√°n tr√™n Internet. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.")
	ErrSignature2            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng, Ng√¢n h√†ng ph√°t h√†nh th·∫ª t·ª´ ch·ªëi c·∫•p ph√©p cho giao d·ªãch. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë·ªÉ bi·∫øt ch√≠nh x√°c nguy√™n nh√¢n Ng√¢n h√†ng t·ª´ ch·ªëi.")
	ErrSignature3            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng, C·ªïng thanh to√°n kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ ng√¢n h√†ng ph√°t h√†nh th·∫ª. Vui l√≤ng li√™n h·ªá v·ªõi ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë·ªÉ bi·∫øt ch√≠nh x√°c tr·∫°ng th√°i giao d·ªãch v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature4            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng do th·∫ª h·∫øt h·∫°n s·ª≠ d·ª•ng ho·∫∑c nh·∫≠p sai th√¥ng tin th√°ng/ nƒÉm h·∫øt h·∫°n c·ªßa th·∫ª. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† thanh to√°n l·∫°i")
	ErrSignature5            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng, Th·∫ª kh√¥ng ƒë·ªß h·∫°n m·ª©c ho·∫∑c t√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ thanh to√°n. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin v√† thanh to√°n l·∫°i")
	ErrSignature6            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng, Qu√° tr√¨nh x·ª≠ l√Ω giao d·ªãch ph√°t sinh l·ªói t·ª´ ng√¢n h√†ng ph√°t h√†nh th·∫ª. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.")
	ErrSignature7            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng, ƒê√£ c√≥ l·ªói ph√°t sinh trong qu√° tr√¨nh x·ª≠ l√Ω giao d·ªãch. Vui l√≤ng th·ª±c hi·ªán thanh to√°n l·∫°i.")
	ErrSignature8            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. S·ªë th·∫ª kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature9            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. T√™n ch·ªß th·∫ª kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature10           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Th·∫ª h·∫øt h·∫°n/Th·∫ª b·ªã kh√≥a. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature11           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Th·∫ª ch∆∞a ƒëƒÉng k√Ω s·ª≠ d·ª•ng d·ªãch v·ª• thanh to√°n tr√™n Internet. Vui l√≤ng li√™n h√™ ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.")
	ErrSignature12           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Ng√†y ph√°t h√†nh/H·∫øt h·∫°n kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature13           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. th·∫ª/ t√†i kho·∫£n ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c thanh to√°n. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature21           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. S·ªë ti·ªÅn kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature22           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Th√¥ng tin t√†i kho·∫£n kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature23           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. T√†i kho·∫£n b·ªã kh√≥a. Vui l√≤ng li√™n h√™ ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£")
	ErrSignature24           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Th√¥ng tin th·∫ª kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature25           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. OTP kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature253          = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Qu√° th·ªùi gian thanh to√°n. Vui l√≤ng th·ª±c hi·ªán thanh to√°n l·∫°i")
	ErrSignature99           = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Ng∆∞·ªùi s·ª≠ d·ª•ng h·ªßy giao d·ªãch")
	ErrSignatureB            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng do kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c 3D-Secure. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.")
	ErrSignatureE            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng do nh·∫≠p sai CSC (Card Security Card) ho·∫∑c ng√¢n h√†ng t·ª´ ch·ªëi c·∫•p ph√©p cho giao d·ªãch. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.")
	ErrSignatureF            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng do kh√¥ng x√°c th·ª±c ƒë∆∞·ª£c 3D-Secure. Vui l√≤ng li√™n h·ªá ng√¢n h√†ng theo s·ªë ƒëi·ªán tho·∫°i sau m·∫∑t th·∫ª ƒë∆∞·ª£c h·ªó tr·ª£ chi ti·∫øt.")
	ErrSignatureZ            = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng do vi ph·∫°m quy ƒë·ªãnh c·ªßa h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá v·ªõi OnePAY ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ (Hotline: 1900 633 927)")
	ErrSignatureOther        = errors.New("Giao d·ªãch kh√¥ng th√†nh c√¥ng. Vui l√≤ng li√™n h·ªá v·ªõi OnePAY ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ (Hotline: 1900 633 927)")
	Err_STRING_METHOD        = "Anh ch·ªã vui l√≤ng l·ª±a ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n h·ª£p l·ªá."
	Err_STRING_TOKEN         = "Phi√™n l√†m vi·ªác c·ªßa anh ch·ªã ƒë√£ h·∫øt h·∫°n ho·∫∑c t√†i kho·∫£n c·ªßa anh ch·ªã ƒë√£ b·ªã kho√°. Anh ch·ªã vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c li√™n h·ªá b·ªô ph·∫≠n chƒÉm s√≥c kh√°ch h√†ng c·ªßa Sandexcare ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."
	Err_STRING_RANGE_DEPOSIT = "ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn thanh to√°n c·ªßa anh ch·ªã ch∆∞a h·ª£p l·ªá. S·ªë ti·ªÅn thanh to√°n ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 50.000 ƒë·ªìng, b·ªôi s·ªë c·ªßa 10.000"
	// Err_STRING_METHOD =
	// Err_STRING_METHOD =
	Err_Unauthorization = ""
	Err_Signature       = "Ch·ªØ k√≠ ch∆∞a h·ª£p l·ªá"
)
